project setup --topLevelPackage org.example 
jpa setup --provider HIBERNATE --database HYPERSONIC_PERSISTENT
entity jpa --class ~.Pet
entity jpa --class ~.Owner
field string --fieldName name
field date --fieldName birthday --type java.util.Calendar
field reference --fieldName pet --type ~.Pet
repository jpa --all --package ~.rep
service --all --apiPackage ~.api --implPackage ~.impl
web mvc setup 
web mvc controller --all --package ~.web


#====================================================================
# TEST 1:  Try to create a finder without generate one                  
#--------------------------------------------------------------------
# Goal:    Fail if not exists a finder in the repository
#
#web mvc finder --controller ~.web.OwnerController --finder findById
#       
# Output:  ERROR: Repository related to controller does not have any finder generated. Use 'finder add' command to solve this.
#          --finder parameter should be completed with related service finders.
#          
# Result:  Inform us that OwnerRepository does not have any finder                                              
#====================================================================

  
#====================================================================
# TEST 2:  Try to create all finders without generate one                   
#--------------------------------------------------------------------
# Goal:    Fail if not exists a finder in the repository
#
#web mvc finder --controller ~.web.OwnerController --all --responseType JSON
#       
# Output:  ERROR: Repository related to controller does not have any finder generated. Use 'finder add' command to solve this.
#          
# Result:  Inform us that OwnerRepository does not have any finder                                                  
#====================================================================


#====================================================================
# TEST 3:  Generate a finder             
#--------------------------------------------------------------------
# Goal:    Test if finder is added
#
finder add --class ~.Owner --name findById
web mvc finder --controller ~.web.OwnerController --finder findById --responseType JSON
#       
# Output:  Updated SRC_MAIN_JAVA/org/example/rep/OwnerRepository.java
#          Created SRC_MAIN_JAVA/org/example/rep/OwnerRepository_Roo_Finder.aj
#          Updated SRC_MAIN_JAVA/org/example/api/OwnerService_Roo_Service.aj
#          Updated SRC_MAIN_JAVA/org/example/impl/OwnerServiceImpl_Roo_Service_Impl.aj
#          Updated SRC_MAIN_JAVA/org/example/web/OwnerController.java
#          Updated SRC_MAIN_JAVA/org/example/web/OwnerController_Roo_JSON.aj
#          
# Result:  Adds finders to @RooJSON annotation @RooJSON(finders = { "findById" }),
#          and generates findById method in the JSON aj:
#		   @RequestMapping(method = RequestMethod.GET, value = "/findById", produces = MediaType.APPLICATION_JSON_VALUE)
#			  @ResponseBody
#			  public List<Owner> OwnerController.findById(@RequestParam Long id) {
#			      return ownerService.findById(id);
#			  }                                    
#====================================================================

#====================================================================
# TEST 4:  Generate a finder that already exists          
#--------------------------------------------------------------------
# Goal:    Check that nothing happens if a finder is already added
#
web mvc finder --controller ~.web.OwnerController --finder findById --responseType JSON
web mvc finder --controller ~.web.OwnerController --all --responseType JSON
#       
# Output:  
#          
# Result:  Since finder is already generated, nothing happens                                                
#====================================================================


#====================================================================
# TEST 5:  Generate all finders    
#--------------------------------------------------------------------
# Goal:    Test if all finders are added into controller
#
finder add --class ~.Owner --name findByNameAndPet
finder add --class ~.Owner --name queryFirst1ByBirthdayBetween
web mvc finder --controller ~.web.OwnerController --all --responseType JSON
#       
# Output:  ...
#          Updated SRC_MAIN_JAVA/org/example/web/OwnerController.java
#          Updated SRC_MAIN_JAVA/org/example/web/OwnerController_Roo_JSON.aj
#          
# Result:  Adds finders to @RooJSON annotation, 
#          @RooJSON(finders = { "findById", "findByNameAndPet", "queryFirst1ByBirthdayBetween" })
#
#          and generates methods in the JSON aj:
#		       @RequestMapping(method = RequestMethod.GET, value = "/findByNameAndPet", produces = MediaType.APPLICATION_JSON_VALUE)
#              @ResponseBody
#              public List<Owner> OwnerController.findByNameAndPet(@RequestParam String name, @RequestParam Pet pet) {
#                 return ownerService.findByNameAndPet(name, pet);
#              }  
#              @RequestMapping(method = RequestMethod.GET, value = "/queryFirst1ByBirthdayBetween", produces = MediaType.APPLICATION_JSON_VALUE)
#              @ResponseBody
#              public Owner OwnerController.queryFirst1ByBirthdayBetween(@RequestParam Calendar birthday1, @RequestParam Calendar birthday2) {
#                 return ownerService.queryFirst1ByBirthdayBetween(birthday1, birthday2);
#              }                                               
#====================================================================


#####################################################################
# 						MANUAL TEST
#####################################################################

#====================================================================
# TEST 6:  Create a finder with an invalid response type       
#--------------------------------------------------------------------
# Goal:    Fail if response type is not supported by the controller
#
# web mvc finder --controller ~.web.OwnerController --finder findById --responseType THYMELEAF
#       
# Output:  --responseType parameter should be completed with the provided response types.
#          
# Result:  Since OwnerController only support JSON responses, the 
#          generation fails                                                
#====================================================================


#====================================================================
# TEST 7:  Add a non-existent finder                  
#--------------------------------------------------------------------
# Goal:    Fail if finder does not exist in the controller service
#
# Open OwnerController.java
# Add "findByActive" to @RooJSON finder and save
#       
# Output:  ERROR: Service org.example.api.OwnerService does not have this finder methods: findByActive 
#          
# Result:  Informs us that OwnerService does not have the method                                               
#====================================================================

#====================================================================
# TEST 8:   Add an existent finder               
#--------------------------------------------------------------------
# Goal:    Test if a finder is added manually
#
finder add --class ~.Owner --name findByIdOrderByNameAsc
# Open OwnerController.java
# Add "findByIdOrderByNameAsc" to @RooJSON finders and save
#       
# Output:  Updated SRC_MAIN_JAVA/org/example/rep/OwnerRepository.java
#          Updated SRC_MAIN_JAVA/org/example/rep/OwnerRepository_Roo_Finder.aj
#          Updated SRC_MAIN_JAVA/org/example/api/OwnerService_Roo_Service.aj
#          Updated SRC_MAIN_JAVA/org/example/impl/OwnerServiceImpl_Roo_Service_Impl.aj
#          Updated SRC_MAIN_JAVA/org/example/web/OwnerController_Roo_JSON.aj
#          
# Result:  Since OwnerService has this method, generates it in the JSON aj:
#	       @RequestMapping(method = RequestMethod.GET, value = "/findByIdOrderByNameAsc", produces = MediaType.APPLICATION_JSON_VALUE)
#          @ResponseBody
#          public List<Owner> OwnerController.findByIdOrderByNameAsc(@RequestParam Long id) {
#             return ownerService.findByIdOrderByNameAsc(id);
#          }  
#====================================================================


 
 