package __PACKAGE__;

import org.springframework.data.domain.AuditorAware;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.roo.addon.security.annotations.RooAuthenticationAuditorAware;

/**
 * Class which allows configuration of the data which is stored as registry when 
 * modifying entity's elements. This implementation tries to obtain the current user 
 * through Spring Security context, returning the Authentication name.
 */

@RooAuthenticationAuditorAware
public class AuthenticationAuditorAware implements AuditorAware<String> {

  /**
   * Obtains the object which represents the selected element for identifying
   * the user who modifies registers of an entity.
   * 
   * @return object which represents the user or null if the user is not logged.
   */
  @Override
  public String getCurrentAuditor() {
    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
    if (authentication == null || !authentication.isAuthenticated()) {
      return null;
    }
    return authentication.getName();
  }
}