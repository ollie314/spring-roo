# Create project, entities and project settings to be able to test subsequent commands.
project setup --topLevelPackage aaa.aaa.aa
jpa setup --provider HIBERNATE --database HYPERSONIC_IN_MEMORY
entity jpa --class ~.domain.Entity1
settings add --name spring.roo.jpa.require.schema-object-name --value true
focus --class ~.domain.Entity1


#=================================================================================================================
# TEST 1: Execute command with a dynamic mandatory option
#-----------------------------------------------------------------------------------------------------------------
# Goal:   Test if command execution is not interrupted if used a dynamic mandatory option depending of a project 
#         setting.
#
field boolean --fieldName boolean_field --column boolean_column
#      
# Output: Updated SRC_MAIN_JAVA/aaa/aaa/aa/domain/Entity1.java
#         Created SRC_MAIN_JAVA/aaa/aaa/aa/domain/Entity1_Roo_JavaBean.aj
#
# Result: Add boolean field without errors.                                         
#=================================================================================================================


##########################################################################
#######                      MANUAL TESTS                        #########
##########################################################################
#                                                                        #
# The following changes must be done manually because there aren't still #
# any operations with dynamic mandatory options.                         #
#                                                                        #
# Henceforth the acronym for dynamic mandatory option will be DMO, and   #
# for dynamic mandatory indicator will be DMI                            #
#                                                                        #
# TODO: This script should be updated when some Spring Roo command       #
# implements dynamic mandatory parameters feature.                       #
#                                                                        #
##########################################################################



#=================================================================================================================
# TEST 2: Execute command without a DMO which depends of a project setting
#-----------------------------------------------------------------------------------------------------------------
# Preparations:
#
#project setup --topLevelPackage aaa.aaa.aa
#jpa setup --provider HIBERNATE --database HYPERSONIC_IN_MEMORY
#entity jpa --class ~.domain.Entity1
#settings add --name spring.roo.jpa.require.schema-object-name --value true
#
# Goal:   Test if command execution is interrupted if a DMO with a DMI (false) which depends of a project setting
#         is not provided.
#
#field boolean --fieldName boolean_field
#
# Output: You must specify option 'column' for this command
#
# Result: Command execution stops, with a message requiring DMO 'column'.                                   
#=================================================================================================================

#=================================================================================================================
# TEST 3: Execute command without DMO when its DMI is false                     
#-----------------------------------------------------------------------------------------------------------------
# Preparations:
#
# * Add to JpaCommands.java the following method:
#
# @CliOptionMandatoryIndicator(command = "jpa setup", params = {"databaseName"})
# public boolean isHostNameMandatory(ShellContext shellContext) {
#   return false;
# }
#
# * Replace @CliOption "databaseName" in "jpa setup" command with this:
# 
# @CliOption(key = "databaseName", mandatory = true, help = "The database name to use") final String databaseName,
#
# * Reinstall addon-jpa
#
# Goal:   Test if command execution is NOT interrupted if dynamic mandatory option (false) is not provided.
#
#jpa setup --provider ECLIPSELINK --database ORACLE
#      
# Output: Created SRC_MAIN_RESOURCES
#         Created SRC_MAIN_RESOURCES/application.properties
#         Updated ROOT/pom.xml [added dependency com.oracle:ojdbc14:10.2.0.5]
#
# Result: Install JPA persistence in the project without errors.                                                                   
#=================================================================================================================


#=================================================================================================================
# TEST 4: Execute command with two DMO's using same DMI
#-----------------------------------------------------------------------------------------------------------------
# Preparations:
#
# * Replace @CliOption "userName" in "jpa setup" command with this:
#
# @CliOption(key = "userName", mandatory = true, help = "The username to use") final String userName,
#
# * Add a second param to mandatory indicator created in TEST 1, like so:
#
# @CliOptionMandatoryIndicator(command = "jpa setup", params = {"databaseName", "userName"})
#
# * Reinstall addon-jpa
#
# Goal:   Test if command execution is NOT interrupted if two DMO's, using same DMI (false), 
#         are not provided.
#
#jpa setup --provider ECLIPSELINK --database ORACLE
#      
# Output: Created SRC_MAIN_RESOURCES
#         Created SRC_MAIN_RESOURCES/application.properties
#         Updated ROOT/pom.xml [added dependency com.oracle:ojdbc14:10.2.0.5]
#
# Result: Install JPA persistence in the project without errors.                                                                   
#=================================================================================================================


#=================================================================================================================
# TEST 5: Execute command without two DMO's when their DMI is true
#-----------------------------------------------------------------------------------------------------------------
# Preparations:
#
# * Change indicator method's return to true:
#
# public boolean isHostNameMandatory(ShellContext shellContext) {
#   return true;
# }
#
# * Reinstall addon-jpa
# 
# Goal:   Test if command execution IS interrupted if two DMO's, using same DMI (true), are not provided.
#
#jpa setup --provider ECLIPSELINK --database ORACLE
#
# Output: You must specify option 'databaseName' for this command
#
# Result: Command execution is interrupted showing a message for the first parameter in the 
#         indicator.                                           
#=================================================================================================================


#=================================================================================================================
# TEST 6: Execute command with a DMO with its DMI (true) depending of other command option
#-----------------------------------------------------------------------------------------------------------------
# Preparations:
#
# * Change indicator method's content to set dependency with other option:
#
# if (shellContext.getParameters().containsKey("hostName")){
#   return true;
# }
# return false;
#
# * Reinstall addon-jpa
# 
# Goal:   Test if command execution is interrupted if a DMO is not provided with its upstream dependency option.
#
#jpa setup --provider ECLIPSELINK --database ORACLE --hostName aa
#
# Output: You must specify option 'databaseName' for this command
#
# Result: Command execution is interrupted showing a message for the first parameter in the 
#         indicator.                                           
#=================================================================================================================


#=================================================================================================================
# TEST 7: Execute command with a DMO with its DMI (false) depending of other command option
#----------------------------------------------------------------------------------------------------------------- 
# Goal:   Test if command execution is interrupted if a DMO is not provided without its upstream dependency 
#         option.
#
#jpa setup --provider ECLIPSELINK --database ORACLE
#
# Output: Created SRC_MAIN_RESOURCES
#         Created SRC_MAIN_RESOURCES/application.properties
#         Updated ROOT/pom.xml [added dependency com.oracle:ojdbc14:10.2.0.5]
#
#         Or
#
#         INFO: No changes are needed.
#
# Result: Install JPA persistence in the project without errors.                                           
#=================================================================================================================


#=================================================================================================================
# TEST 8: Test autocompletions in the above situations.
#----------------------------------------------------------------------------------------------------------------- 
# Goal:   Test if autocomplete works well with DMO and DMI.
#
# Result: Autocomplete should provide the DMO before optional parameters when its DMI returns true or it is
#         autocompleted with the optionals when its DMI returns false.                                    
#=================================================================================================================
