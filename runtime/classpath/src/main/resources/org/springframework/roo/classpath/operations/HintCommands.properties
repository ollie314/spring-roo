topics=The following hints are available to help you use Roo:\r\r general, start, persistence, entities, fields, repositories, services,\rcontrollers, relationships, finders, eclipse\r\rJust type 'hint topic_name' (without quotes) to view a specific hint.

general=At this stage of the project, you have a few options:\r\r  * List all hint topics via 'hint topics'\r  * Create more fields with 'hint fields'\r  * Create more entities with 'hint entities'\r  * Create a web controller with 'hint controller'\r  * Create dynamic finders with 'hint finders'\r  * Run tests via Maven (type 'perform tests')\r  * Build a deployment artifact (type 'perform package')\r  * Learn about Eclipse integration by typing 'hint eclipse'\r  * Discover all Roo commands by typing 'help'

start=Welcome to Roo! We hope you enjoy your stay!\n\nBefore you can use many features of Roo, you need to start a new project.\r\rTo do this, type 'project setup' (without the quotes) and then hit ${completion_key}.\r\rEnter a --topLevelPackage like 'com.mycompany.projectname' (no quotes).\rWhen you've finished completing your --topLevelPackage, press ENTER.\rYour new project will then be created in the current working directory.\r\rNote that Roo frequently allows the use of ${completion_key}, so press ${completion_key} regularly.\rOnce your project is created, type 'hint' and ENTER for the next suggestion.\rYou're also welcome to visit http://stackoverflow.com/questions/tagged/spring-roo\rfor Roo help.

persistence=Roo requires the installation of a persistence configuration.\r\rType 'jpa setup' and then hit ${completion_key}. We suggest you type 'H'\rthen ${completion_key} to complete "HIBERNATE".\r\rAfter the --provider, press ${completion_key} for database choices.\rFor testing purposes, type (or ${completion_key}) HYPERSONIC_IN_MEMORY.\rIf you press ${completion_key} again, you'll see there are no more options.\rAs such, you're ready to press ENTER to execute the command.\r\rOnce JPA is installed, type 'hint' and ENTER for the next suggestion.\n\n
entities=You can create entities either via Roo or your IDE.\nUsing the Roo shell is fast and easy, especially thanks to the ${completion_key} completion.\r\rStart by typing 'ent' and then hitting ${completion_key}.\rEnter the --class in the form '~.domain.MyEntityClassName'\rIn Roo, '~' means the --topLevelPackage you specified via 'project setup'.\r\rTo see the optional arguments, hit ${completion_key}. For example, use '--readOnly' optional\rparameter to generate a readOnly entity.\rYou can always use this approach to view optional arguments.\r\rAfter creating an entity, use 'hint' for the next suggestion.
fields=You can add fields to your entities using either Roo or your IDE.\n\nTo add a new field, type 'field' and then hit ${completion_key}. Be sure to select\nyour entity and provide a legal Java field name. Use ${completion_key} to find an entity\nname, and '~' to refer to the top level package. Also remember to use ${completion_key}\nto access each mandatory argument for the command.\n\nAfter completing the mandatory arguments, press SPACE and ${completion_key}.\nThe optional arguments shown reflect official JSR 303 Validation constraints.\nFeel free to use an optional argument, or hit ENTER.\n\nIf creating multiple fields, use the UP arrow to access command history.\n\nAfter adding your fields, type 'hint' for the next suggestion.\nTo learn about setting up many-to-one fields, type 'hint relationships'.
repositories=You can create Spring Data repositories related with your generated entities.\r\rTo add a new Spring Data repository, type 'repository jpa' and then\rhit ${completion_key}. Be sure to select your entity and provide a name for your new\rSpring Data repository. Use ${completion_key} to find an entity name , and '~'\rto refer to the top level package. Also remember to use ${completion_key}\nto access each mandatory argument for the command.\n\nAfter completing the mandatory arguments, press SPACE and ${completion_key}. Feel free\rto use an optional argument, or hit ENTER to execute command.\r\rAfter creating a new repository, use 'hint' for the next suggestion.
services=You can create service layer using Spring Roo Shell.\r\rTo add a new service, type 'service' and then hit  ${completion_key}. Be sure to select your related entity\rand provide a name for your new service interface.\rUse ${completion_key} to find an entity\nname , and '~' to refer to the top level package. Also remember to use ${completion_key}\nto access each mandatory argument for the command.\n\nAfter completing the mandatory arguments, press SPACE and ${completion_key}.\rFeel free to use an optional argument, or hit ENTER to execute command.\r\rAfter creating a new service, use 'hint' for the next suggestion.
mvc=You can install Spring MVC Support in your generated project\rusing Spring Roo Shell.\r\rTo do it, type 'web mvc setup' and then hit ENTER.\r\r You can configure Spring MVC to some different application servers\rusing '--appServer' optional parameter. By default 'EMBEDDED' server will be used.
controllers=After install Spring MVC support, you will be able to generate @Controllers\rusing Spring Roo Shell.\r\rTo do it, type 'web mvc controller' and then then hit ${completion_key}. Be sure to select your related entity\rand provide a name for your new controller.\r\rBy default, Spring Roo generates JSON response types. If you want to use\rsome other response type use 'web mvc views setup' command.\r\rAlso, with 'web mvc controller' command you will be able to update existing controllers\rwith some different responseTypes like JSON and THYMELEAF.

relationships=You create persistent relationships via 'field set' and 'field reference'.\n\nFor example, consider the typical Order <-> LineItem case:\n\n   ENTITY: Order            ENTITY: LineItem\n   Set<LineItem> items      Order order\n\nTo setup this relationship in Roo, you would use:\n\nfield set --fieldName items --class Order --type LineItem --mappedBy order\nfield reference --fieldName order --class LineItem --type Order --notNull\n\nLearn about fields addition using 'hint fields'.
finders=Roo can automatically create complex, type-safe finder methods.\n\nBe sure to add fields to your entity before creating finders.\nLearn how to add fields by typing 'hint fields'.\n\nTo view available finders, type 'finder list' then ${completion_key}.\nNext select your entity class and hit ENTER. Names are then displayed.\nYou can see even more finder combinations by using --depth 2 or higher.\n\nTo add a finder, type 'finder add' and hit ${completion_key}.\nSpecify a --finderName from the earlier displayed output of 'list finders for'.\n\nFor more hints, type 'hint' and hit ENTER.
eclipse=It's easy to use your project in Eclipse or SpringSource Tool Suite (STS).\r\rTo set this up, you'll need to use the command prompt and then Eclipse itself:\r\r  1. Start by typing 'exit', to leave the Roo shell\r  2. Type 'mvn eclipse:clean eclipse:eclipse' to create Eclipse project files\r  3. Load Eclipse, then File > Import > Existing Projects Into Workspace\r  4. Ensure AJDT 1.6.5 or above is installed in Eclipse\r  5. Enable Window > Preferences > General > Workspace > Refresh Automatically\r  6. Finally, restart Roo (type 'roo' at the OS prompt) and enter 'hint'\r\rPlease note if you have the m2eclipse plugin installed, you need only select\rImport > Maven Projects from the Eclipse Import menu.\r\rFor the best Eclipse experience, we recommend SpringSource Tool Suite (STS):\r\r  * Graphical editing of Roo commands\r  * No need to use the Roo shell\r  * Immediate importing of Roo projects\r  * Full Spring projects integration\r  * Many other productivity-increasing features\r\rDownload STS from http://springsource.com (it's free!).\r\rYou can also use 'perform eclipse' instead of leaving the Roo interface.
